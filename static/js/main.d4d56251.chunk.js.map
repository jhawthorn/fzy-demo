{"version":3,"sources":["rails_files.txt","fzy.svg","Terminal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Terminal","react_default","a","createElement","className","this","props","children","Component","Result","value","positions","fzy","query","chars","nextPos","shift","i","length","tmp","push","key","Results","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","fetch","rails_files","then","response","text","txt","split","setState","regex","RegExp","map","escapeRegExp","join","results","filter","x","match","sortBy","score","slice","filterResults","s","App_Result","App","_this2","handleChange","bind","assertThisInitialized","input","focus","event","target","_this3","href","src","fzySvg","alt","src_Terminal_0","onClick","type","onChange","ref","autocomplete","autocorrect","autocapitalize","spellcheck","App_Results","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4d56251.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rails_files.2e9932a7.txt\";","module.exports = __webpack_public_path__ + \"static/media/fzy.b71c3ae4.svg\";","import React, { Component } from 'react';\n\nimport './Terminal.css';\n\n/* Based on https://codepen.io/Onfe/pen/zmvmRJ */\n\nclass Terminal extends Component {\n  render() {\n    return (\n      <div className=\"Terminal\">\n        <div className=\"Terminal-bar\"></div>\n        <div className=\"Terminal-content\">\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Terminal;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport rails_files from './rails_files.txt';\nimport fzySvg from './fzy.svg';\n\nimport fzy from 'fzy.js';\n\nimport { sortBy, escapeRegExp } from 'lodash';\n\nimport Terminal from './Terminal';\n\nfunction filterResults(data, query) {\n  var regex = new RegExp(query.split('').map(escapeRegExp).join('.*'));\n\n  var results = data;\n\n  results = results.filter((x) => x.match(regex));\n\n  results = sortBy(results, (x) => -fzy.score(query, x));\n\n  results = results.slice(0,15);\n\n  return results;\n}\n\nclass Result extends Component {\n  render() {\n    let { value } = this.props;\n    var positions = fzy.positions(this.props.query, value);\n    var chars = [];\n\n    var nextPos = positions.shift();\n    for (let i = 0; i < value.length;) {\n      let tmp;\n\n      tmp = \"\";\n      while (i === nextPos && i < value.length) {\n        tmp += value[i++];\n        nextPos = positions.shift();\n      }\n      if (tmp.length) {\n        chars.push(<b key={i}>{tmp}</b>);\n      }\n\n      tmp = \"\";\n      while (i !== nextPos && i < value.length) {\n        tmp += value[i++];\n      }\n      if (tmp.length) {\n        chars.push(<span key={i}>{tmp}</span>);\n      }\n    }\n\n    return (\n      <li>{ chars }</li>\n    );\n  }\n}\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {data: null};\n\n    fetch(rails_files)\n      .then((response) => response.text())\n      .then((txt) => txt.split(\"\\n\"))\n      .then((data) => this.setState({ data: data }));\n  }\n\n  render() {\n    const { query } = this.props;\n    const { data } = this.state;\n\n    if (!data) {\n      return <div>Loading...</div>\n    }\n    return (\n      <ul className=\"App-results\">\n        {\n          filterResults(data, query).map((s) => <Result key={ query + s } query={query} value={s} />)\n        }\n      </ul>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {query: 'arbase'};\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    this.input.focus();\n  }\n\n  handleChange(event) {\n    this.setState({query: event.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a href=\"https://github.com/jhawthorn/fzy\">\n            <img src={fzySvg} className=\"App-logo\" alt=\"logo\" />\n          </a>\n        </header>\n        <Terminal>\n          <div className=\"App-ui\" onClick={ () => this.input.focus() }>\n            <div className=\"App-cmdline\">\n              ~/rails/rails $ git ls-files | fzy\n            </div>\n            <div className=\"App-prompt\">\n              <span>&gt;&nbsp;</span>\n              <input\n                type=\"text\"\n                className=\"App-input\"\n                value={this.state.query}\n                onChange={this.handleChange}\n                ref={(input) => { this.input = input; }}\n                autocomplete=\"off\"\n                autocorrect=\"off\"\n                autocapitalize=\"off\"\n                spellcheck=\"false\"\n              />\n            </div>\n            <Results query={this.state.query} />\n          </div>\n        </Terminal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}