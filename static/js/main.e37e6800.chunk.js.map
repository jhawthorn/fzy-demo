{"version":3,"sources":["App.js","serviceWorker.js","index.js","rails_files.txt"],"names":["Results","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","fetch","rails_files","then","response","text","txt","split","setState","react_default","a","createElement","className","query","regex","RegExp","join","results","filter","x","match","sortBy","score","slice","map","filterResults","Component","App","_this2","handleChange","bind","assertThisInitialized","input","focus","event","target","value","_this3","src","alt","type","onChange","ref","App_Results","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"gTAuBMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,KAAM,MAEpBC,MAAMC,KACHC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACG,GAAD,OAASA,EAAIC,MAAM,QACxBJ,KAAK,SAACH,GAAD,OAAUR,EAAKgB,SAAS,CAAER,KAAMA,MAPvBR,wEAWjB,OAAKG,KAAKI,MAAMC,KAIdS,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eA9BpB,SAAuBZ,EAAMa,GAC3B,IAAIC,EAAQ,IAAIC,OAAOF,EAAMN,MAAM,IAAIS,KAAK,OAExCC,EAAUjB,EAQd,OANAiB,EAAUA,EAAQC,OAAO,SAACC,GAAD,OAAOA,EAAEC,MAAMN,MAIxCG,GAFAA,EAAUI,iBAAOJ,EAAS,SAACE,GAAD,OAAQG,gBAAMT,EAAOM,MAE7BI,MAAM,EAAE,KAEXC,IAAI,SAACL,GAAD,OAAOV,EAAAC,EAAAC,cAAA,UAAKQ,KAqBvBM,CAAc9B,KAAKI,MAAMC,KAAML,KAAKJ,MAAMsB,QALvCJ,EAAAC,EAAAC,cAAA,gCAbSe,aA0DPC,cAhCb,SAAAA,EAAYpC,GAAO,IAAAqC,EAAA,OAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgC,IACjBC,EAAAnC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkC,GAAA7B,KAAAH,KAAMJ,KACDQ,MAAQ,CAACc,MAAO,aAErBe,EAAKC,aAAeD,EAAKC,aAAaC,KAAlBrC,OAAAsC,EAAA,EAAAtC,QAAAsC,EAAA,EAAAtC,CAAAmC,KAJHA,mFAQjBjC,KAAKqC,MAAMC,6CAGAC,GACXvC,KAAKa,SAAS,CAACK,MAAOqB,EAAMC,OAAOC,yCAG5B,IAAAC,EAAA1C,KACP,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAK2B,IAAI,8BAA8B1B,UAAU,WAAW2B,IAAI,SAChE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,qBAAuBF,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,OAAO5B,UAAU,YAAYwB,MAAOzC,KAAKI,MAAMc,MAAO4B,SAAU9C,KAAKkC,aAAca,IAAK,SAACV,GAAYK,EAAKL,MAAQA,MAEvJvB,EAAAC,EAAAC,cAACgC,EAAD,CAAS9B,MAAOlB,KAAKI,MAAMc,kBAzBrBa,aCpCEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3B,MACvB,2DCZN4B,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.e37e6800.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport rails_files from './rails_files.txt';\n\nimport { score } from 'fzy.js';\n\nimport { sortBy } from 'lodash';\n\nfunction filterResults(data, query) {\n  var regex = new RegExp(query.split('').join('.*'));\n\n  var results = data;\n\n  results = results.filter((x) => x.match(regex));\n\n  results = sortBy(results, (x) => -score(query, x));\n\n  results = results.slice(0,15);\n\n  return results.map((x) => <li>{x}</li>);\n}\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {data: null};\n\n    fetch(rails_files)\n      .then((response) => response.text())\n      .then((txt) => txt.split(\"\\n\"))\n      .then((data) => this.setState({ data: data }));\n  }\n\n  render() {\n    if (!this.state.data) {\n      return <div>Loading...</div>\n    }\n    return (\n      <ul className=\"App-results\">\n        {\n          filterResults(this.state.data, this.props.query)\n        }\n      </ul>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {query: 'arbase.rb'};\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    this.input.focus();\n  }\n\n  handleChange(event) {\n    this.setState({query: event.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src=\"http://i.hawth.ca/u/fzy.svg\" className=\"App-logo\" alt=\"logo\" />\n          <div className=\"App-ui\">\n            <div className=\"App-prompt\">\n              <span>&gt;&nbsp;</span><input type=\"text\" className=\"App-input\" value={this.state.query} onChange={this.handleChange} ref={(input) => { this.input = input; }} />\n            </div>\n            <Results query={this.state.query} />\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/rails_files.2e9932a7.txt\";"],"sourceRoot":""}